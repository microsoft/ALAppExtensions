// ------------------------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// ------------------------------------------------------------------------------------------------

/// <summary>
/// Tests for Mail Merge codeunit
/// </summary>
codeunit 130443 "Word Templates Test"
{
    Subtype = Test;

    var
        PermissionsMock: Codeunit "Permissions Mock";
        Assert: Codeunit "Library Assert";

    [Test]
    procedure TestCreateDocument()
    var
        WordTemplates: Codeunit "Word Template";
        MergeFields: List of [Text];
        InStream: InStream;
    begin
        // [SCENARIO] Creation of document template with fields provides zip with document template and data source txt file
        PermissionsMock.Set('Word Templates Edit');

        // [GIVEN] Merge fields
        MergeFields.Add('CustomerName');
        MergeFields.Add('Address');

        // [WHEN] Run create document with merge fields and save zip to temp blob
        WordTemplates.Create(MergeFields);

        // [THEN] Open zip to verify contents
        WordTemplates.GetTemplate(InStream);

        Assert.IsFalse(InStream.EOS(), 'The Template should not have been empty.');
    end;

    [Test]
    procedure TestCreateDocumentInternals()
    var
        WordTemplatesImpl: Codeunit "Word Template Impl.";
        MergeFields: List of [Text];
    begin
        // [SCENARIO] Creation of document template with fields provides zip with document template and data source txt file
        PermissionsMock.Set('Word Templates Edit');

        // [GIVEN] Merge fields
        MergeFields.Add('CustomerName');
        MergeFields.Add('Address');

        // [WHEN] Run create document with merge fields and save zip to temp blob
        WordTemplatesImpl.Create(MergeFields);

        // [THEN] Verify the Merge fields are set correctly
        WordTemplatesImpl.GetMergeFields(MergeFields);

        Assert.IsTrue(MergeFields.Contains('CustomerName'), 'CustomerName should have been part of the Merge Fields.');
        Assert.IsTrue(MergeFields.Contains('Address'), 'Address should have been part of the Merge Fields.');
    end;

    [Test]
    procedure TestCreateDocumentInternalsForRecord()
    var
        WordTemplatesImpl: Codeunit "Word Template Impl.";
        MergeFields: List of [Text];
    begin
        // [SCENARIO] Creation of document template with fields provides zip with document template and data source txt file
        PermissionsMock.Set('Word Templates Edit');

        // [WHEN] Run create document with merge fields and save zip to temp blob
        WordTemplatesImpl.Create(Database::"Word Template");

        // [THEN] Verify the Merge fields are set correctly
        WordTemplatesImpl.GetMergeFields(MergeFields);

        Assert.IsTrue(MergeFields.Contains('Code'), 'Code should have been part of the Merge Fields.');
        Assert.IsTrue(MergeFields.Contains('Name'), 'Name should have been part of the Merge Fields.');
        Assert.IsTrue(MergeFields.Contains('Table ID'), 'Table ID should have been part of the Merge Fields.');
        Assert.IsTrue(MergeFields.Contains('Table Caption'), 'Table Caption should have been part of the Merge Fields.');
        Assert.IsTrue(MergeFields.Contains('System ID'), 'System Id should have been part of the Merge Fields.');
        Assert.IsTrue(MergeFields.Contains('Created At'), 'Created At should have been part of the Merge Fields.');
        Assert.IsTrue(MergeFields.Contains('Created By'), 'Created By should have been part of the Merge Fields.');
        Assert.IsTrue(MergeFields.Contains('Modified At'), 'Modified At should have been part of the Merge Fields.');
        Assert.IsTrue(MergeFields.Contains('Modified By'), 'Modified By should have been part of the Merge Fields.');

        // [THEN] Verify the TableNo of the Template is set correctly
        Assert.AreEqual(Database::"Word Template", WordTemplatesImpl.GetTableId(), 'A different table ID was expected.');
    end;

    [Test]
    [TransactionModel(TransactionModel::AutoRollback)]
    [HandlerFunctions('ConfirmHandlerFalse')]
    procedure TestLoadDocumentAndExecute()
    var
        WordTemplateRec: Record "Word Template";
        Base64: Codeunit "Base64 Convert";
        Document: Codeunit "Temp Blob";
        DataSource: Codeunit "Temp Blob";
        WordTemplate: Codeunit "Word Template";
        WordTemplateCode: Code[30];
        OutputText: Text;
        OutStream: OutStream;
        InStream: InStream;
        CR, CL : Char;
    begin
        // [SCENARIO] Load document and execute upon a dataset and verify that the output contains the data

        // [GIVEN] Document from base64 and two records. Records contains multiline values and special characters.
        PermissionsMock.Stop();
        CR := 13;
        CL := 10;
        InsertWordTemplatesTestTable(1, 'Value' + CR + CL + '1', 'Value2', 'Value3');
        InsertWordTemplatesTestTable(2, 'Value4', 'Value5', 'Valüe6');

        Document.CreateOutStream(OutStream, TextEncoding::UTF8);
        Base64.FromBase64(GetTemplateDocumentForRecord(), OutStream);
        Document.CreateInStream(InStream, TextEncoding::UTF8);

        WordTemplateCode := 'TEST';
        WordTemplateRec.Code := WordTemplateCode;
        WordTemplateRec."Table ID" := Database::"Word Templates Test Table 2";
        WordTemplateRec.Template.ImportStream(InStream, 'Template');
        WordTemplateRec.Insert();

        PermissionsMock.Start();
        PermissionsMock.Set('Word Templates Edit');

        // [WHEN] Load document from stream and execute upon with datasource
        WordTemplate.Load(WordTemplateCode);
        DataSource.CreateInStream(InStream, TextEncoding::UTF8);
        WordTemplate.Merge(false, Enum::"Word Templates Save Format"::Text);

        // [THEN] Check document for data source values
        WordTemplate.GetDocument(InStream);
        InStream.Read(OutputText);

        Assert.IsTrue(OutputText.Contains('Value' + CR + CL + '1'), 'Value \n 1 is missing from the document');
        Assert.IsTrue(OutputText.Contains('Value2'), 'Value2 is missing from the document');
        Assert.IsTrue(OutputText.Contains('Value3'), 'Value3 is missing from the document');
        Assert.IsTrue(OutputText.Contains('Value4'), 'Value4 is missing from the document');
        Assert.IsTrue(OutputText.Contains('Value5'), 'Value5 is missing from the document');
        Assert.IsTrue(OutputText.Contains('Valüe6'), 'Valüe6 is missing from the document');
    end;

    [Test]
    [TransactionModel(TransactionModel::AutoRollback)]
    procedure TestLoadDocumentAndExecuteDictionary()
    var
        WordTemplateRec: Record "Word Template";
        Base64: Codeunit "Base64 Convert";
        Document: Codeunit "Temp Blob";
        WordTemplates: Codeunit "Word Template";
        DataSource: Dictionary of [Text, Text];
        OutputText: Text;
        OutStream: OutStream;
        InStream: InStream;
    begin
        // [SCENARIO] Load document and execute upon a dataset and verify that the output contains the data
        PermissionsMock.Set('Word Templates Edit');

        // [GIVEN] Document from base64 and data source
        DataSource.Add('CustomerName', 'Darrick');
        DataSource.Add('Address', 'Copenhagen');
        DataSource.Add('TæstChår', 'FTæst');

        Document.CreateOutStream(OutStream, TextEncoding::UTF8);
        Base64.FromBase64(GetTemplateDocument(), OutStream);
        Document.CreateInStream(InStream, TextEncoding::UTF8);

        WordTemplateRec.Code := 'TEST';
        WordTemplateRec.Template.ImportStream(InStream, 'Template');
        WordTemplateRec.Insert();

        WordTemplates.Load(WordTemplateRec.Code);
        WordTemplates.Merge(DataSource, Enum::"Word Templates Save Format"::Text);

        // [THEN] Check document for data source values
        WordTemplates.GetDocument(InStream);
        InStream.Read(OutputText);

        Assert.IsTrue(WordTemplates.GetDocumentSize() > 0, 'Document do not have a size');
        Assert.IsTrue(OutputText.Contains('Darrick'), 'Darrick is missing from the document');
        Assert.IsTrue(OutputText.Contains('Copenhagen'), 'Copenhagen is missing from the document');
        Assert.IsTrue(OutputText.Contains('FTæst'), 'FTæst is missing from the document');
    end;

    [Test]
    [TransactionModel(TransactionModel::AutoRollback)]
    procedure TestGetTemplateName()
    var
        WordTemplateImpl: Codeunit "Word Template Impl.";
    begin
        // [SCENARIO] Check that reserved characters are removed from the template name.
        PermissionsMock.Set('Word Templates Edit');
        WordTemplateImpl.Create(130443); // Caption = Word Templates Test / Table "<>:/\|?*
        Assert.AreEqual('Word Templates Test _ Table __________Template.docx', WordTemplateImpl.GetTemplateName('docx'), 'Template name is incorrect.');
    end;


    [Test]
    [TransactionModel(TransactionModel::AutoRollback)]
    procedure TestGenerateColumnName()
    var
        WordTemplateImpl: Codeunit "Word Template Impl.";
    begin
        // [SCENARIO] Check conversion of column numbers to column names for excel column
        PermissionsMock.Set('Word Templates Edit');

        Assert.AreEqual('', WordTemplateImpl.ConvertColNoToColName(0), 'Column name is incorrect.');
        Assert.AreEqual('A', WordTemplateImpl.ConvertColNoToColName(1), 'Column name is incorrect.');
        Assert.AreEqual('Z', WordTemplateImpl.ConvertColNoToColName(26), 'Column name is incorrect.');
        Assert.AreEqual('AA', WordTemplateImpl.ConvertColNoToColName(27), 'Column name is incorrect.');
        Assert.AreEqual('AC', WordTemplateImpl.ConvertColNoToColName(29), 'Column name is incorrect.');
        Assert.AreEqual('AZ', WordTemplateImpl.ConvertColNoToColName(52), 'Column name is incorrect.');
        Assert.AreEqual('ZZ', WordTemplateImpl.ConvertColNoToColName(702), 'Column name is incorrect.');
    end;

    local procedure InsertWordTemplatesTestTable(No: Integer; Value1: Text[100]; Value2: Text[100]; Value3: Text[100])
    var
        WordTemplatesTestTable2: Record "Word Templates Test Table 2";
    begin
        WordTemplatesTestTable2."No." := No;
        WordTemplatesTestTable2.Value := Value1;
        WordTemplatesTestTable2."Value 2" := Value2;
        WordTemplatesTestTable2."Value 3" := Value3;
        WordTemplatesTestTable2.Insert();
    end;

    local procedure GetTemplateDocument(): Text
    begin
        exit('');
    end;

    local procedure GetTemplateDocumentForRecord(): Text
    begin
        exit('');
    end;

    [ConfirmHandler]
    procedure ConfirmHandlerFalse(Question: Text[1024]; var Reply: Boolean)
    begin
        Reply := false;
    end;
}
// ------------------------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// ------------------------------------------------------------------------------------------------
namespace Microsoft.Finance.Analysis;

codeunit 689 "Payment Practices"
{
    var
        PaymentPracticeMath: Codeunit "Payment Practice Math";

    procedure Generate(var PaymentPracticeHeader: Record "Payment Practice Header") DataIsNotEmpty: Boolean
    var
        PaymentPracticeData: Record "Payment Practice Data";
    begin
        PaymentPracticeData.Reset();
        PaymentPracticeData.SetRange("Header No.", PaymentPracticeHeader."No.");
        PaymentPracticeData.DeleteAll();
        GenerateData(PaymentPracticeData, PaymentPracticeHeader, PaymentPracticeHeader."Header Type");
        DataIsNotEmpty := not PaymentPracticeData.IsEmpty();
        PaymentPracticeHeader."Generated On" := CurrentDateTime();
        PaymentPracticeHeader."Generated By" := CopyStr(UserId(), 1, MaxStrLen(PaymentPracticeHeader."Generated By"));
        GenerateTotals(PaymentPracticeData, PaymentPracticeHeader);
        GenerateLines(PaymentPracticeHeader."Aggregation Type", PaymentPracticeData, PaymentPracticeHeader);
        PaymentPracticeHeader."Modified Manually" := false;
        PaymentPracticeHeader.Modify(false);
    end;

    local procedure GenerateTotals(var PaymentPracticeData: Record "Payment Practice Data"; var PaymentPracticeHeader: Record "Payment Practice Header")
    begin
        PaymentPracticeHeader."Average Actual Payment Period" := PaymentPracticeMath.GetAverageActualPaymentTime(PaymentPracticeData);
        PaymentPracticeHeader."Average Agreed Payment Period" := PaymentPracticeMath.GetAverageAgreedPaymentTime(PaymentPracticeData);
        PaymentPracticeHeader."Pct Paid on Time" := PaymentPracticeMath.GetPercentOfOnTimePayments(PaymentPracticeData);
    end;

    local procedure GenerateData(var PaymentPracticeData: Record "Payment Practice Data"; PaymentPracticeHeader: Record "Payment Practice Header"; PaymentPracticeDataGenerator: Interface PaymentPracticeDataGenerator)
    begin
        PaymentPracticeDataGenerator.GenerateData(PaymentPracticeData, PaymentPracticeHeader);
    end;

    local procedure GenerateLines(PaymentPracticeLinesAggregator: Interface PaymentPracticeLinesAggregator; var PaymentPracticeData: Record "Payment Practice Data"; PaymentPracticeHeader: Record "Payment Practice Header")
    begin
        PaymentPracticeLinesAggregator.GenerateLines(PaymentPracticeData, PaymentPracticeHeader);
    end;
}

codeunit 10796 "Create ES Column Layout"
{
    InherentEntitlements = X;
    InherentPermissions = X;

    trigger OnRun()
    var
        ContosoESAccountSchedule: Codeunit "Contoso ES Account Schedule";
        CreateESColumnLayoutName: Codeunit "Create ES Column Layout Name";
    begin
        ContosoESAccountSchedule.SetOverwriteData(true);
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.BeginningBalanceDebitsCreditsEndingBalance(), 10000, '1', BeginningBalanceLbl, Enum::"Column Layout Type"::"Beginning Balance", Enum::"Column Layout Entry Type"::Entries, Enum::"Account Schedule Amount Type"::"Net Amount", '', false, Enum::"Column Layout Show"::Always, 'P', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.BeginningBalanceDebitsCreditsEndingBalance(), 20000, '2', DebitsLbl, Enum::"Column Layout Type"::"Net Change", Enum::"Column Layout Entry Type"::Entries, Enum::"Account Schedule Amount Type"::"Debit Amount", '', false, Enum::"Column Layout Show"::Always, 'P', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.BeginningBalanceDebitsCreditsEndingBalance(), 30000, '3', CreditsLbl, Enum::"Column Layout Type"::"Net Change", Enum::"Column Layout Entry Type"::Entries, Enum::"Account Schedule Amount Type"::"Credit Amount", '', false, Enum::"Column Layout Show"::Always, 'P', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.BeginningBalanceDebitsCreditsEndingBalance(), 40000, '4', EndingBalanceLbl, Enum::"Column Layout Type"::Formula, Enum::"Column Layout Entry Type"::Entries, Enum::"Account Schedule Amount Type"::"Net Amount", '1+2-3', false, Enum::"Column Layout Show"::Always, '', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.BalanceSheetTrend(), 10000, '1', JanuaryLbl, Enum::"Column Layout Type"::"Balance at Date", Enum::"Column Layout Entry Type"::Entries, Enum::"Account Schedule Amount Type"::"Net Amount", '', false, Enum::"Column Layout Show"::Always, 'FY[1]', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.BalanceSheetTrend(), 20000, '2', FebruaryLbl, Enum::"Column Layout Type"::"Balance at Date", Enum::"Column Layout Entry Type"::Entries, Enum::"Account Schedule Amount Type"::"Net Amount", '', false, Enum::"Column Layout Show"::Always, 'FY[2]', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.BalanceSheetTrend(), 30000, '3', MarchLbl, Enum::"Column Layout Type"::"Balance at Date", Enum::"Column Layout Entry Type"::Entries, Enum::"Account Schedule Amount Type"::"Net Amount", '', false, Enum::"Column Layout Show"::Always, 'FY[3]', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.BalanceSheetTrend(), 40000, '4', AprilLbl, Enum::"Column Layout Type"::"Balance at Date", Enum::"Column Layout Entry Type"::Entries, Enum::"Account Schedule Amount Type"::"Net Amount", '', false, Enum::"Column Layout Show"::Always, 'FY[4]', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.BalanceSheetTrend(), 50000, '5', MayLbl, Enum::"Column Layout Type"::"Balance at Date", Enum::"Column Layout Entry Type"::Entries, Enum::"Account Schedule Amount Type"::"Net Amount", '', false, Enum::"Column Layout Show"::Always, 'FY[5]', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.BalanceSheetTrend(), 60000, '6', JuneLbl, Enum::"Column Layout Type"::"Balance at Date", Enum::"Column Layout Entry Type"::Entries, Enum::"Account Schedule Amount Type"::"Net Amount", '', false, Enum::"Column Layout Show"::Always, 'FY[6]', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.BalanceSheetTrend(), 70000, '7', JulyLbl, Enum::"Column Layout Type"::"Balance at Date", Enum::"Column Layout Entry Type"::Entries, Enum::"Account Schedule Amount Type"::"Net Amount", '', false, Enum::"Column Layout Show"::Always, 'FY[7]', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.BalanceSheetTrend(), 80000, '8', AugustLbl, Enum::"Column Layout Type"::"Balance at Date", Enum::"Column Layout Entry Type"::Entries, Enum::"Account Schedule Amount Type"::"Net Amount", '', false, Enum::"Column Layout Show"::Always, 'FY[8]', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.BalanceSheetTrend(), 90000, '9', SeptemberLbl, Enum::"Column Layout Type"::"Balance at Date", Enum::"Column Layout Entry Type"::Entries, Enum::"Account Schedule Amount Type"::"Net Amount", '', false, Enum::"Column Layout Show"::Always, 'FY[9]', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.BalanceSheetTrend(), 100000, '10', OctoberLbl, Enum::"Column Layout Type"::"Balance at Date", Enum::"Column Layout Entry Type"::Entries, Enum::"Account Schedule Amount Type"::"Net Amount", '', false, Enum::"Column Layout Show"::Always, 'FY[10]', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.BalanceSheetTrend(), 110000, '11', NovemberLbl, Enum::"Column Layout Type"::"Balance at Date", Enum::"Column Layout Entry Type"::Entries, Enum::"Account Schedule Amount Type"::"Net Amount", '', false, Enum::"Column Layout Show"::Always, 'FY[11]', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.BalanceSheetTrend(), 120000, '12', DecemberLbl, Enum::"Column Layout Type"::"Balance at Date", Enum::"Column Layout Entry Type"::Entries, Enum::"Account Schedule Amount Type"::"Net Amount", '', false, Enum::"Column Layout Show"::Always, 'FY[12]', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.CurrentMonthBalance(), 10000, '1', CurrentMonthBalanceLbl, Enum::"Column Layout Type"::"Balance at Date", Enum::"Column Layout Entry Type"::Entries, Enum::"Account Schedule Amount Type"::"Net Amount", '', false, Enum::"Column Layout Show"::Always, 'P', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.CurrentMonthBalancePriorMonthBalance(), 10000, '1', CurrentMonthBalanceLbl, Enum::"Column Layout Type"::"Balance at Date", Enum::"Column Layout Entry Type"::Entries, Enum::"Account Schedule Amount Type"::"Net Amount", '', false, Enum::"Column Layout Show"::Always, 'P', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.CurrentMonthBalancePriorMonthBalance(), 20000, '2', PriorMonthBalanceLbl, Enum::"Column Layout Type"::"Balance at Date", Enum::"Column Layout Entry Type"::Entries, Enum::"Account Schedule Amount Type"::"Net Amount", '', false, Enum::"Column Layout Show"::Always, '-1P', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.CurrentMonthBalancePriorMonthBalance(), 30000, '3', DifferenceLbl, Enum::"Column Layout Type"::Formula, Enum::"Column Layout Entry Type"::Entries, Enum::"Account Schedule Amount Type"::"Net Amount", '1-2', false, Enum::"Column Layout Show"::Always, '', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.CurrentMonthBalancevSameMonthPriorYearBalance(), 10000, '1', CurrentMonthBalanceLbl, Enum::"Column Layout Type"::"Balance at Date", Enum::"Column Layout Entry Type"::Entries, Enum::"Account Schedule Amount Type"::"Net Amount", '', false, Enum::"Column Layout Show"::Always, 'P', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.CurrentMonthBalancevSameMonthPriorYearBalance(), 20000, '2', SameMonthPriorYearBalanceLbl, Enum::"Column Layout Type"::"Balance at Date", Enum::"Column Layout Entry Type"::Entries, Enum::"Account Schedule Amount Type"::"Net Amount", '', false, Enum::"Column Layout Show"::Always, '-1FY', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.CurrentMonthBalancevSameMonthPriorYearBalance(), 30000, '3', DifferenceLbl, Enum::"Column Layout Type"::Formula, Enum::"Column Layout Entry Type"::Entries, Enum::"Account Schedule Amount Type"::"Net Amount", '1-2', false, Enum::"Column Layout Show"::Always, '', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.CurrentMonthNetChange(), 10000, '1', CurrentMonthNetChangeLbl, Enum::"Column Layout Type"::"Net Change", Enum::"Column Layout Entry Type"::Entries, Enum::"Account Schedule Amount Type"::"Net Amount", '', false, Enum::"Column Layout Show"::Always, 'P', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.CurrentMonthsNetChangeBudget(), 10000, '1', JanuaryLbl, Enum::"Column Layout Type"::"Net Change", Enum::"Column Layout Entry Type"::"Budget Entries", Enum::"Account Schedule Amount Type"::"Net Amount", '', false, Enum::"Column Layout Show"::Always, 'FY[1]', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.CurrentMonthsNetChangeBudget(), 20000, '2', FebruaryLbl, Enum::"Column Layout Type"::"Net Change", Enum::"Column Layout Entry Type"::"Budget Entries", Enum::"Account Schedule Amount Type"::"Net Amount", '', false, Enum::"Column Layout Show"::Always, 'FY[2]', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.CurrentMonthsNetChangeBudget(), 30000, '3', MarchLbl, Enum::"Column Layout Type"::"Net Change", Enum::"Column Layout Entry Type"::"Budget Entries", Enum::"Account Schedule Amount Type"::"Net Amount", '', false, Enum::"Column Layout Show"::Always, 'FY[3]', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.CurrentMonthsNetChangeBudget(), 40000, '4', AprilLbl, Enum::"Column Layout Type"::"Net Change", Enum::"Column Layout Entry Type"::"Budget Entries", Enum::"Account Schedule Amount Type"::"Net Amount", '', false, Enum::"Column Layout Show"::Always, 'FY[4]', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.CurrentMonthsNetChangeBudget(), 50000, '5', MayLbl, Enum::"Column Layout Type"::"Net Change", Enum::"Column Layout Entry Type"::"Budget Entries", Enum::"Account Schedule Amount Type"::"Net Amount", '', false, Enum::"Column Layout Show"::Always, 'FY[5]', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.CurrentMonthsNetChangeBudget(), 60000, '6', JuneLbl, Enum::"Column Layout Type"::"Net Change", Enum::"Column Layout Entry Type"::"Budget Entries", Enum::"Account Schedule Amount Type"::"Net Amount", '', false, Enum::"Column Layout Show"::Always, 'FY[6]', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.CurrentMonthsNetChangeBudget(), 70000, '7', JulyLbl, Enum::"Column Layout Type"::"Net Change", Enum::"Column Layout Entry Type"::"Budget Entries", Enum::"Account Schedule Amount Type"::"Net Amount", '', false, Enum::"Column Layout Show"::Always, 'FY[7]', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.CurrentMonthsNetChangeBudget(), 80000, '8', AugustLbl, Enum::"Column Layout Type"::"Net Change", Enum::"Column Layout Entry Type"::"Budget Entries", Enum::"Account Schedule Amount Type"::"Net Amount", '', false, Enum::"Column Layout Show"::Always, 'FY[8]', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.CurrentMonthsNetChangeBudget(), 90000, '9', SeptemberLbl, Enum::"Column Layout Type"::"Net Change", Enum::"Column Layout Entry Type"::"Budget Entries", Enum::"Account Schedule Amount Type"::"Net Amount", '', false, Enum::"Column Layout Show"::Always, 'FY[9]', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.CurrentMonthsNetChangeBudget(), 100000, '10', OctoberLbl, Enum::"Column Layout Type"::"Net Change", Enum::"Column Layout Entry Type"::"Budget Entries", Enum::"Account Schedule Amount Type"::"Net Amount", '', false, Enum::"Column Layout Show"::Always, 'FY[10]', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.CurrentMonthsNetChangeBudget(), 110000, '11', NovemberLbl, Enum::"Column Layout Type"::"Net Change", Enum::"Column Layout Entry Type"::"Budget Entries", Enum::"Account Schedule Amount Type"::"Net Amount", '', false, Enum::"Column Layout Show"::Always, 'FY[11]', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.CurrentMonthsNetChangeBudget(), 120000, '12', DecemberLbl, Enum::"Column Layout Type"::"Net Change", Enum::"Column Layout Entry Type"::"Budget Entries", Enum::"Account Schedule Amount Type"::"Net Amount", '', false, Enum::"Column Layout Show"::Always, 'FY[12]', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.CurrentMonthsNetChangeBudget(), 130000, '13', TotalLbl, Enum::"Column Layout Type"::Formula, Enum::"Column Layout Entry Type"::"Budget Entries", Enum::"Account Schedule Amount Type"::"Net Amount", '1..12', false, Enum::"Column Layout Show"::Always, '', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.CurrentMonthNetChangePriorMonthNetChange(), 10000, '1', CurrentMonthNetChangeLbl, Enum::"Column Layout Type"::"Net Change", Enum::"Column Layout Entry Type"::Entries, Enum::"Account Schedule Amount Type"::"Net Amount", '', false, Enum::"Column Layout Show"::Always, 'P', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.CurrentMonthNetChangePriorMonthNetChange(), 20000, '2', PriorMonthNetChangeLbl, Enum::"Column Layout Type"::"Net Change", Enum::"Column Layout Entry Type"::Entries, Enum::"Account Schedule Amount Type"::"Net Amount", '', false, Enum::"Column Layout Show"::Always, '-1P', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.CurrentMonthNetChangePriorMonthNetChange(), 30000, '3', DifferenceLbl, Enum::"Column Layout Type"::Formula, Enum::"Column Layout Entry Type"::Entries, Enum::"Account Schedule Amount Type"::"Net Amount", '1-2', false, Enum::"Column Layout Show"::Always, '', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.CurrentMonthNetChangeSameMonthPriorYearNetChange(), 10000, '1', CurrentMonthNetChangeLbl, Enum::"Column Layout Type"::"Net Change", Enum::"Column Layout Entry Type"::Entries, Enum::"Account Schedule Amount Type"::"Net Amount", '', false, Enum::"Column Layout Show"::Always, 'P', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.CurrentMonthNetChangeSameMonthPriorYearNetChange(), 20000, '2', SameMonthPriorYearNetChanLbl, Enum::"Column Layout Type"::"Net Change", Enum::"Column Layout Entry Type"::Entries, Enum::"Account Schedule Amount Type"::"Net Amount", '', false, Enum::"Column Layout Show"::Always, '-1FY', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.CurrentMonthNetChangeSameMonthPriorYearNetChange(), 30000, '3', DifferenceLbl, Enum::"Column Layout Type"::Formula, Enum::"Column Layout Entry Type"::Entries, Enum::"Account Schedule Amount Type"::"Net Amount", '1-2', false, Enum::"Column Layout Show"::Always, '', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.CurrentMonthNetChangePriorMonthNetChangeForCYandCurrentMonthPriorMonthForPY(), 10000, '1', CurrentMonthNetChangeLbl, Enum::"Column Layout Type"::"Net Change", Enum::"Column Layout Entry Type"::Entries, Enum::"Account Schedule Amount Type"::"Net Amount", '', false, Enum::"Column Layout Show"::Always, 'P', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.CurrentMonthNetChangePriorMonthNetChangeForCYandCurrentMonthPriorMonthForPY(), 20000, '2', PriorMonthNetChangeLbl, Enum::"Column Layout Type"::"Net Change", Enum::"Column Layout Entry Type"::Entries, Enum::"Account Schedule Amount Type"::"Net Amount", '', false, Enum::"Column Layout Show"::Always, '-1P', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.CurrentMonthNetChangePriorMonthNetChangeForCYandCurrentMonthPriorMonthForPY(), 30000, '3', DifferenceLbl, Enum::"Column Layout Type"::Formula, Enum::"Column Layout Entry Type"::Entries, Enum::"Account Schedule Amount Type"::"Net Amount", '1-2', false, Enum::"Column Layout Show"::Always, '', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.CurrentMonthNetChangePriorMonthNetChangeForCYandCurrentMonthPriorMonthForPY(), 40000, '4', '', Enum::"Column Layout Type"::Formula, Enum::"Column Layout Entry Type"::Entries, Enum::"Account Schedule Amount Type"::"Net Amount", '', false, Enum::"Column Layout Show"::Always, '', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.CurrentMonthNetChangePriorMonthNetChangeForCYandCurrentMonthPriorMonthForPY(), 50000, '5', CurrentMonthNetChangeLbl, Enum::"Column Layout Type"::"Net Change", Enum::"Column Layout Entry Type"::Entries, Enum::"Account Schedule Amount Type"::"Net Amount", '', false, Enum::"Column Layout Show"::Always, 'P', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.CurrentMonthNetChangePriorMonthNetChangeForCYandCurrentMonthPriorMonthForPY(), 60000, '6', SameMonthPriorYearNetChanLbl, Enum::"Column Layout Type"::"Net Change", Enum::"Column Layout Entry Type"::Entries, Enum::"Account Schedule Amount Type"::"Net Amount", '', false, Enum::"Column Layout Show"::Always, '-1FY', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.CurrentMonthNetChangePriorMonthNetChangeForCYandCurrentMonthPriorMonthForPY(), 70000, '7', DifferenceLbl, Enum::"Column Layout Type"::Formula, Enum::"Column Layout Entry Type"::Entries, Enum::"Account Schedule Amount Type"::"Net Amount", '5-6', false, Enum::"Column Layout Show"::Always, '', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.CurrentMonthBudgetYearToDateBudgetAndBudgetTotalAndBudgetRemaining(), 10000, '1', CurrentMonthActualLbl, Enum::"Column Layout Type"::"Net Change", Enum::"Column Layout Entry Type"::Entries, Enum::"Account Schedule Amount Type"::"Net Amount", '', false, Enum::"Column Layout Show"::Always, 'P', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.CurrentMonthBudgetYearToDateBudgetAndBudgetTotalAndBudgetRemaining(), 20000, '2', CurrentMonthBudgetLbl, Enum::"Column Layout Type"::"Net Change", Enum::"Column Layout Entry Type"::"Budget Entries", Enum::"Account Schedule Amount Type"::"Net Amount", '', false, Enum::"Column Layout Show"::Always, 'P', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.CurrentMonthBudgetYearToDateBudgetAndBudgetTotalAndBudgetRemaining(), 30000, '3', DifferenceLbl, Enum::"Column Layout Type"::Formula, Enum::"Column Layout Entry Type"::Entries, Enum::"Account Schedule Amount Type"::"Net Amount", '1-2', false, Enum::"Column Layout Show"::Always, '', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.CurrentMonthBudgetYearToDateBudgetAndBudgetTotalAndBudgetRemaining(), 40000, '4', '', Enum::"Column Layout Type"::Formula, Enum::"Column Layout Entry Type"::Entries, Enum::"Account Schedule Amount Type"::"Net Amount", '', false, Enum::"Column Layout Show"::Always, '', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.CurrentMonthBudgetYearToDateBudgetAndBudgetTotalAndBudgetRemaining(), 50000, '5', YearToDateActualLbl, Enum::"Column Layout Type"::"Net Change", Enum::"Column Layout Entry Type"::Entries, Enum::"Account Schedule Amount Type"::"Net Amount", '', false, Enum::"Column Layout Show"::Always, 'FY[1..CP]', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.CurrentMonthBudgetYearToDateBudgetAndBudgetTotalAndBudgetRemaining(), 60000, '6', YearToDateBudgetLbl, Enum::"Column Layout Type"::"Net Change", Enum::"Column Layout Entry Type"::"Budget Entries", Enum::"Account Schedule Amount Type"::"Net Amount", '', false, Enum::"Column Layout Show"::Always, 'FY[1..CP]', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.CurrentMonthBudgetYearToDateBudgetAndBudgetTotalAndBudgetRemaining(), 70000, '7', DifferenceLbl, Enum::"Column Layout Type"::Formula, Enum::"Column Layout Entry Type"::Entries, Enum::"Account Schedule Amount Type"::"Net Amount", '5-6', false, Enum::"Column Layout Show"::Always, '', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.CurrentMonthBudgetYearToDateBudgetAndBudgetTotalAndBudgetRemaining(), 80000, '8', '', Enum::"Column Layout Type"::Formula, Enum::"Column Layout Entry Type"::Entries, Enum::"Account Schedule Amount Type"::"Net Amount", '', false, Enum::"Column Layout Show"::Always, '', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.CurrentMonthBudgetYearToDateBudgetAndBudgetTotalAndBudgetRemaining(), 90000, '9', TotalBudgetPlannedLbl, Enum::"Column Layout Type"::"Net Change", Enum::"Column Layout Entry Type"::"Budget Entries", Enum::"Account Schedule Amount Type"::"Net Amount", '', false, Enum::"Column Layout Show"::Always, 'FY[1..12]', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.CurrentMonthBudgetYearToDateBudgetAndBudgetTotalAndBudgetRemaining(), 100000, '10', TotalBudgetRemainingLbl, Enum::"Column Layout Type"::Formula, Enum::"Column Layout Entry Type"::"Budget Entries", Enum::"Account Schedule Amount Type"::"Net Amount", '9-5', false, Enum::"Column Layout Show"::Always, '', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.IncomeStatementTrend(), 10000, 'A', JanuaryLbl, Enum::"Column Layout Type"::"Net Change", Enum::"Column Layout Entry Type"::Entries, Enum::"Account Schedule Amount Type"::"Net Amount", '', false, Enum::"Column Layout Show"::Always, 'FY[1]', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.IncomeStatementTrend(), 20000, 'A', FebruaryLbl, Enum::"Column Layout Type"::"Net Change", Enum::"Column Layout Entry Type"::Entries, Enum::"Account Schedule Amount Type"::"Net Amount", '', false, Enum::"Column Layout Show"::Always, 'FY[2]', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.IncomeStatementTrend(), 30000, 'A', MarchLbl, Enum::"Column Layout Type"::"Net Change", Enum::"Column Layout Entry Type"::Entries, Enum::"Account Schedule Amount Type"::"Net Amount", '', false, Enum::"Column Layout Show"::Always, 'FY[3]', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.IncomeStatementTrend(), 40000, 'A', AprilLbl, Enum::"Column Layout Type"::"Net Change", Enum::"Column Layout Entry Type"::Entries, Enum::"Account Schedule Amount Type"::"Net Amount", '', false, Enum::"Column Layout Show"::Always, 'FY[4]', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.IncomeStatementTrend(), 50000, 'A', MayLbl, Enum::"Column Layout Type"::"Net Change", Enum::"Column Layout Entry Type"::Entries, Enum::"Account Schedule Amount Type"::"Net Amount", '', false, Enum::"Column Layout Show"::Always, 'FY[5]', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.IncomeStatementTrend(), 60000, 'A', JuneLbl, Enum::"Column Layout Type"::"Net Change", Enum::"Column Layout Entry Type"::Entries, Enum::"Account Schedule Amount Type"::"Net Amount", '', false, Enum::"Column Layout Show"::Always, 'FY[6]', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.IncomeStatementTrend(), 70000, 'A', JulyLbl, Enum::"Column Layout Type"::"Net Change", Enum::"Column Layout Entry Type"::Entries, Enum::"Account Schedule Amount Type"::"Net Amount", '', false, Enum::"Column Layout Show"::Always, 'FY[7]', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.IncomeStatementTrend(), 80000, 'A', AugustLbl, Enum::"Column Layout Type"::"Net Change", Enum::"Column Layout Entry Type"::Entries, Enum::"Account Schedule Amount Type"::"Net Amount", '', false, Enum::"Column Layout Show"::Always, 'FY[8]', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.IncomeStatementTrend(), 90000, 'A', SeptemberLbl, Enum::"Column Layout Type"::"Net Change", Enum::"Column Layout Entry Type"::Entries, Enum::"Account Schedule Amount Type"::"Net Amount", '', false, Enum::"Column Layout Show"::Always, 'FY[9]', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.IncomeStatementTrend(), 100000, 'A', OctoberLbl, Enum::"Column Layout Type"::"Net Change", Enum::"Column Layout Entry Type"::Entries, Enum::"Account Schedule Amount Type"::"Net Amount", '', false, Enum::"Column Layout Show"::Always, 'FY[10]', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.IncomeStatementTrend(), 110000, 'A', NovemberLbl, Enum::"Column Layout Type"::"Net Change", Enum::"Column Layout Entry Type"::Entries, Enum::"Account Schedule Amount Type"::"Net Amount", '', false, Enum::"Column Layout Show"::Always, 'FY[11]', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.IncomeStatementTrend(), 120000, 'A', DecemberLbl, Enum::"Column Layout Type"::"Net Change", Enum::"Column Layout Entry Type"::Entries, Enum::"Account Schedule Amount Type"::"Net Amount", '', false, Enum::"Column Layout Show"::Always, 'FY[12]', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.IncomeStatementTrend(), 130000, '', TotalLbl, Enum::"Column Layout Type"::Formula, Enum::"Column Layout Entry Type"::Entries, Enum::"Account Schedule Amount Type"::"Net Amount", 'A', false, Enum::"Column Layout Show"::Always, '', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.Balance(), 10000, '', CurrentFiscalYearLbl, Enum::"Column Layout Type"::"Balance at Date", Enum::"Column Layout Entry Type"::Entries, Enum::"Account Schedule Amount Type"::"Net Amount", '', false, Enum::"Column Layout Show"::Always, '', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.Balance(), 20000, '', LastFiscalYearLbl, Enum::"Column Layout Type"::"Balance at Date", Enum::"Column Layout Entry Type"::Entries, Enum::"Account Schedule Amount Type"::"Net Amount", '', false, Enum::"Column Layout Show"::Always, '', '<-1Y>');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.Pyg(), 10000, '', CurrentFiscalYearLbl, Enum::"Column Layout Type"::"Net Change", Enum::"Column Layout Entry Type"::Entries, Enum::"Account Schedule Amount Type"::"Net Amount", '', false, Enum::"Column Layout Show"::Always, '', '');
        ContosoESAccountSchedule.InsertColumnLayout(CreateESColumnLayoutName.Pyg(), 20000, '', LastFiscalYearLbl, Enum::"Column Layout Type"::"Net Change", Enum::"Column Layout Entry Type"::Entries, Enum::"Account Schedule Amount Type"::"Net Amount", '', false, Enum::"Column Layout Show"::Always, '', '<-1Y>');
        ContosoESAccountSchedule.SetOverwriteData(false);
    end;

    var
        BeginningBalanceLbl: Label 'Beginning Balance', MaxLength = 30;
        DebitsLbl: Label 'Debits', MaxLength = 30;
        CreditsLbl: Label 'Credits', MaxLength = 30;
        EndingBalanceLbl: Label 'Ending Balance', MaxLength = 30;
        JanuaryLbl: Label 'January', MaxLength = 30;
        FebruaryLbl: Label 'February', MaxLength = 30;
        MarchLbl: Label 'March', MaxLength = 30;
        AprilLbl: Label 'April', MaxLength = 30;
        MayLbl: Label 'May', MaxLength = 30;
        JuneLbl: Label 'June', MaxLength = 30;
        JulyLbl: Label 'July', MaxLength = 30;
        AugustLbl: Label 'August', MaxLength = 30;
        SeptemberLbl: Label 'September', MaxLength = 30;
        OctoberLbl: Label 'October', MaxLength = 30;
        NovemberLbl: Label 'November', MaxLength = 30;
        DecemberLbl: Label 'December', MaxLength = 30;
        CurrentMonthBalanceLbl: Label 'Current Month Balance', MaxLength = 30;
        PriorMonthBalanceLbl: Label 'Prior Month Balance', MaxLength = 30;
        DifferenceLbl: Label 'Difference', MaxLength = 30;
        SameMonthPriorYearBalanceLbl: Label 'Same Month Prior Year Balance', MaxLength = 30;
        CurrentMonthNetChangeLbl: Label 'Current Month Net Change', MaxLength = 30;
        TotalLbl: Label 'Total', MaxLength = 30;
        PriorMonthNetChangeLbl: Label 'Prior Month Net Change', MaxLength = 30;
        SameMonthPriorYearNetChanLbl: Label 'Same Month Prior Year Net Chan', MaxLength = 30;
        CurrentMonthActualLbl: Label 'Current Month Actual', MaxLength = 30;
        CurrentMonthBudgetLbl: Label 'Current Month Budget', MaxLength = 30;
        YearToDateActualLbl: Label 'Year to Date Actual', MaxLength = 30;
        YearToDateBudgetLbl: Label 'Year to Date Budget', MaxLength = 30;
        TotalBudgetPlannedLbl: Label 'Total Budget Planned', MaxLength = 30;
        TotalBudgetRemainingLbl: Label 'Total Budget Remaining', MaxLength = 30;
        CurrentFiscalYearLbl: Label 'Current Fiscal Year', MaxLength = 30;
        LastFiscalYearLbl: Label 'Last Fiscal Year', MaxLength = 30;
}
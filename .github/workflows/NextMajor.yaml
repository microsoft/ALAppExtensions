name: ' Test Next Major'

on:
  workflow_dispatch:

permissions:
  contents: read

defaults:
  run:
    shell: PowerShell

jobs:
  Initialization:
    runs-on: [ self-hosted,1ES.Pool=ALAppExt ]
    env:
      workflowDepth: 1
    outputs:
      telemetryScopeJson: ${{ steps.init.outputs.telemetryScopeJson }}
      settings: ${{ steps.ReadSettings.outputs.SettingsJson }}
      projects: ${{ steps.ReadSettings.outputs.ProjectsJson }}
      projectCount: ${{ steps.ReadSettings.outputs.ProjectCount }}
      githubRunner: ${{ steps.ReadSettings.outputs.GitHubRunnerJson }}
      projectDependenciesJson: ${{ steps.ReadSettings.outputs.ProjectDependenciesJson }}
      buildOrderJson: ${{ steps.ReadSettings.outputs.BuildOrderJson }}
      buildOrderDepth: ${{ steps.ReadSettings.outputs.BuildOrderDepth }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Initialize the workflow
        id: init
        uses: microsoft/AL-Go-Actions/WorkflowInitialize@preview
        with:
          eventId: "DO0099"

      - name: Read settings
        id: ReadSettings
        uses: microsoft/AL-Go-Actions/ReadSettings@preview
        with:
          parentTelemetryScopeJson: ${{ steps.init.outputs.telemetryScopeJson }}
          getProjects: 'Y'

      - name: Determine Build Order
        if: env.WorkflowDepth > 1
        id: BuildOrder
        run: |
          $ErrorActionPreference = "STOP"
          $projects = '${{ steps.ReadSettings.outputs.ProjectsJson }}' | ConvertFrom-Json
          $buildOrder = '${{ steps.ReadSettings.outputs.BuildOrderJson }}' | ConvertFrom-Json
          $depth = ${{ steps.ReadSettings.outputs.BuildOrderDepth }}
          $workflowDepth = ${{ steps.ReadSettings.outputs.WorkflowDepth }}
          if ($depth -lt $workflowDepth) {
            Write-Host "::Error::Project Dependencies depth is $depth. Workflow is only setup for $workflowDepth. You need to Run Update AL-Go System Files to update the workflows"
            $host.SetShouldExit(1)
          }
          $step = $depth
          $depth..1 | ForEach-Object {
            $ps = @($buildOrder."$_" | Where-Object { $projects -contains $_ })
            if ($ps.Count -eq 1) {
              $projectsJSon = "[$($ps | ConvertTo-Json -compress)]"
            }
            else {
              $projectsJSon = $ps | ConvertTo-Json -compress
            }
            if ($ps.Count -gt 0) {
              Add-Content -Path $env:GITHUB_OUTPUT -Value "Projects$($step)Json=$projectsJson"
              Add-Content -Path $env:GITHUB_OUTPUT -Value "Projects$($step)Count=$($ps.count)"
              Write-Host "Projects$($step)Json=$projectsJson"
              Write-Host "Projects$($step)Count=$($ps.count)"
              $step--
            }
          }
          while ($step -ge 1) {
              Add-Content -Path $env:GITHUB_OUTPUT -Value "Projects$($step)Json="
              Add-Content -Path $env:GITHUB_OUTPUT -Value "Projects$($step)Count=0"
              Write-Host "Projects$($step)Json="
              Write-Host "Projects$($step)Count=0"
              $step--
          }

  Build:
    needs: [ Initialization ]
    if: ${{ needs.Initialization.outputs.projectCount > 0 }}
    runs-on: ${{ fromJson(needs.Initialization.outputs.githubRunner) }}
    strategy:
      matrix:
        project: ${{ fromJson(needs.Initialization.outputs.projects) }}
      fail-fast: false
    name: Build ${{ matrix.project }}
    outputs:
      TestResultsArtifactsName: ${{ steps.calculateArtifactNames.outputs.TestResultsArtifactsName }}
      BcptTestResultsArtifactsName: ${{ steps.calculateArtifactNames.outputs.BcptTestResultsArtifactsName }}
      BuildOutputArtifactsName: ${{ steps.calculateArtifactNames.outputs.BuildOutputArtifactsName }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: '${{ github.workspace }}\.dependencies'

      - name: Read settings
        uses: microsoft/AL-Go-Actions/ReadSettings@preview
        with:
          parentTelemetryScopeJson: ${{ needs.Initialization.outputs.telemetryScopeJson }}
          project: ${{ matrix.project }}

      - name: Read secrets
        uses: microsoft/AL-Go-Actions/ReadSecrets@preview
        env:
          secrets: ${{ toJson(secrets) }}
        with:
          parentTelemetryScopeJson: ${{ needs.Initialization.outputs.telemetryScopeJson }}
          settingsJson: ${{ env.Settings }}
          secrets: 'licenseFileUrl,insiderSasToken,CodeSignCertificateUrl,CodeSignCertificatePassword,KeyVaultCertificateUrl,KeyVaultCertificatePassword,KeyVaultClientId,GitHubPackagesContext'

      - name: Run pipeline
        uses: microsoft/AL-Go-Actions/RunPipeline@preview
        with:
          parentTelemetryScopeJson: ${{ needs.Initialization.outputs.telemetryScopeJson }}
          Project: ${{ matrix.project }}
          ProjectDependenciesJson: ${{ needs.Initialization.outputs.projectDependenciesJson }}
          settingsJson: ${{ env.Settings }}
          SecretsJson: ${{ env.RepoSecrets }}

      - name: Calculate Artifact names
        id: calculateArtifactNames
        if: success() || failure()
        run: |
          $ErrorActionPreference = "STOP"
          $settings = '${{ env.Settings }}' | ConvertFrom-Json
          $project = '${{ matrix.project }}'
          if ($project -eq ".") { $project = $settings.RepoName }
          'TestResults','BcptTestResults','BuildOutput' | ForEach-Object {
            $name = "$($_)ArtifactsName"
            $value = "$($project.Replace('\','_'))-$_-NextMajor-$([DateTime]::UtcNow.ToString('yyyyMMdd'))"
            Add-Content -Path $env:GITHUB_OUTPUT -Value "$name=$value"
            Add-Content -Path $env:GITHUB_ENV -Value "$name=$value"
          }

      - name: Publish artifacts - build output
        uses: actions/upload-artifact@v3
        if: (success() || failure()) && (hashFiles(format('{0}/BuildOutput.txt',matrix.project)) != '')
        with:
          name: ${{ env.buildOutputArtifactsName }}
          path: '${{ matrix.project }}/BuildOutput.txt'
          if-no-files-found: ignore

      - name: Publish artifacts - test results
        uses: actions/upload-artifact@v3
        if: (success() || failure()) && (hashFiles(format('{0}/TestResults.xml',matrix.project)) != '')
        with:
          name: ${{ env.testResultsArtifactsName }}
          path: '${{ matrix.project }}/TestResults.xml'
          if-no-files-found: ignore

      - name: Publish artifacts - bcpt test results
        uses: actions/upload-artifact@v3
        if: (success() || failure()) && (hashFiles(format('{0}/bcptTestResults.json',matrix.project)) != '')
        with:
          name: ${{ env.bcptTestResultsArtifactsName }}
          path: '${{ matrix.project }}/bcptTestResults.json'
          if-no-files-found: ignore

      - name: Analyze Test Results
        id: analyzeTestResults
        if: success() || failure()
        uses: microsoft/AL-Go-Actions/AnalyzeTests@preview
        with:
          parentTelemetryScopeJson: ${{ needs.Initialization.outputs.telemetryScopeJson }}
          Project: ${{ matrix.project }}

      - name: Cleanup
        if: always()
        uses: microsoft/AL-Go-Actions/PipelineCleanup@preview
        with:
          parentTelemetryScopeJson: ${{ needs.Initialization.outputs.telemetryScopeJson }}
          Project: ${{ matrix.project }}

  PostProcess:
    if: always()
    runs-on: [ self-hosted,1ES.Pool=ALAppExt ]
    needs: [ Initialization, Build ]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Finalize the workflow
        id: PostProcess
        uses: microsoft/AL-Go-Actions/WorkflowPostProcess@preview
        with:
          eventId: "DO0099"
          telemetryScopeJson: ${{ needs.Initialization.outputs.telemetryScopeJson }}

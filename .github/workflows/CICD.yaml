name: CI/CD

on:
  workflow_dispatch:
  push:
    paths-ignore:
      - 'README.md'
      - '.github/**'
    branches: [ 'main', 'release/*', 'feature/*' ]
  pull_request:
    paths-ignore:
      - 'README.md'
      - '.github/**'
    branches: [ 'main' ]

permissions:
  contents: read
  actions: read

defaults:
  run:
    shell: PowerShell

jobs:
  Initialization:
    runs-on: [ bc-build ]
    outputs:
      telemetryScopeJson: ${{ steps.init.outputs.telemetryScopeJson }}
      settings: ${{ steps.ReadSettings.outputs.SettingsJson }}
      projects: ${{ steps.ReadSettings.outputs.ProjectsJson }}
      projectCount: ${{ steps.ReadSettings.outputs.ProjectCount }}
      environments: ${{ steps.ReadSettings.outputs.EnvironmentsJson }}
      environmentCount: ${{ steps.ReadSettings.outputs.EnvironmentCount }}
      deliveryTargets: ${{ steps.DetermineDeliveryTargets.outputs.DeliveryTargetsJson }}
      deliveryTargetCount: ${{ steps.DetermineDeliveryTargets.outputs.DeliveryTargetCount }}
      githubRunner: ${{ steps.ReadSettings.outputs.GitHubRunnerJson }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Initialize the workflow
        id: init
        uses: freddydk/AL-Go-Actions/WorkflowInitialize@main
        with:
          eventId: "DO0091"

      - name: Read settings
        id: ReadSettings
        uses: freddydk/AL-Go-Actions/ReadSettings@main
        with:
          parentTelemetryScopeJson: ${{ steps.init.outputs.telemetryScopeJson }}
          getProjects: 'Y'
          getEnvironments: '*'

      - name: Read secrets
        uses: freddydk/AL-Go-Actions/ReadSecrets@main
        env:
          secrets: ${{ toJson(secrets) }}
        with:
          settingsJson: ${{ env.Settings }}
          secrets: 'StorageContext,AppSourceContext'

      - name: Determine Delivery Targets
        id: DetermineDeliveryTargets
        run: |
          $deliveryTargets = @()
          if ($env:StorageContext) {
            $deliveryTargets += @("Storage")
          }
          if ($env:type -eq "AppSource App" -and $env:AppSourceContinuousDelivery -eq "true") {
            if ($env:AppSourceContext) {
              $deliveryTargets += @("AppSource")
            }
          }
          $deliveryTargetsJson = $deliveryTargets | ConvertTo-Json -Depth 99 -compress
          if ($deliveryTargets.Count -lt 2) { $deliveryTargetsJson = "[$($deliveryTargetsJson)]" }
          Write-Host "::set-output name=DeliveryTargetsJson::$deliveryTargetsJson"
          Write-Host "set-output name=DeliveryTargetsJson::$deliveryTargetsJson"
          Write-Host "::set-output name=DeliveryTargetCount::$($deliveryTargets.Count)"
          Write-Host "set-output name=DeliveryTargetCount::$($deliveryTargets.Count)"
          Add-Content -Path $env:GITHUB_ENV -Value "DeliveryTargets=$deliveryTargetsJson"

  CheckForUpdates:
    runs-on: [ bc-build ]
    needs: [ Initialization ]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Read settings
        uses: freddydk/AL-Go-Actions/ReadSettings@main
        with:
          parentTelemetryScopeJson: ${{ needs.Initialization.outputs.telemetryScopeJson }}
          get: TemplateUrl

      - name: Check for updates to AL-Go system files
        uses: freddydk/AL-Go-Actions/CheckForUpdates@main
        with:
          parentTelemetryScopeJson: ${{ needs.Initialization.outputs.telemetryScopeJson }}
          templateUrl: ${{ env.TemplateUrl }}

  Build:
    needs: [ Initialization ]
    if: ${{ needs.Initialization.outputs.projectCount > 0 }}
    runs-on: ${{ fromJson(needs.Initialization.outputs.githubRunner) }}
    strategy:
      matrix:
        project: ${{ fromJson(needs.Initialization.outputs.projects) }}
      fail-fast: false
    name: Build ${{ matrix.project }}
    outputs:
      AppsArtifactsName: ${{ steps.calculateArtifactNames.outputs.AppsArtifactsName }}
      TestAppsArtifactsName: ${{ steps.calculateArtifactNames.outputs.TestAppsArtifactsName }}
      TestResultsArtifactsName: ${{ steps.calculateArtifactNames.outputs.TestResultsArtifactsName }}
      BcptTestResultsArtifactsName: ${{ steps.calculateArtifactNames.outputs.BcptTestResultsArtifactsName }}
      BuildOutputArtifactsName: ${{ steps.calculateArtifactNames.outputs.BuildOutputArtifactsName }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          lfs: true

      - name: Read settings
        uses: freddydk/AL-Go-Actions/ReadSettings@main
        with:
          parentTelemetryScopeJson: ${{ needs.Initialization.outputs.telemetryScopeJson }}
          project: ${{ matrix.project }}

      - name: Read secrets (PR)
        uses: freddydk/AL-Go-Actions/ReadSecrets@main
        if: github.event_name == 'pull_request'
        env:
          secrets: ${{ toJson(secrets) }}
        with:
          parentTelemetryScopeJson: ${{ needs.Initialization.outputs.telemetryScopeJson }}
          settingsJson: ${{ env.Settings }}
          secrets: 'licenseFileUrl,insiderSasToken,KeyVaultCertificateUrl,KeyVaultCertificatePassword,KeyVaultClientId'

      - name: Read secrets
        uses: freddydk/AL-Go-Actions/ReadSecrets@main
        if: github.event_name != 'pull_request'
        env:
          secrets: ${{ toJson(secrets) }}
        with:
          parentTelemetryScopeJson: ${{ needs.Initialization.outputs.telemetryScopeJson }}
          settingsJson: ${{ env.Settings }}
          secrets: 'licenseFileUrl,insiderSasToken,CodeSignCertificateUrl,CodeSignCertificatePassword,KeyVaultCertificateUrl,KeyVaultCertificatePassword,KeyVaultClientId,StorageContext'

      - name: Run pipeline
        uses: freddydk/AL-Go-Actions/RunPipeline@main
        with:
          parentTelemetryScopeJson: ${{ needs.Initialization.outputs.telemetryScopeJson }}
          Project: ${{ matrix.project }}
          settingsJson: ${{ env.Settings }}
          SecretsJson: ${{ env.RepoSecrets }}

      - name: Calculate Artifact names
        id: calculateArtifactNames
        if: success() || failure()
        run: |
          $settings = '${{ env.Settings }}' | ConvertFrom-Json
          $project = '${{ matrix.project }}'
          if ($project -eq ".") { $project = $settings.RepoName }
          'Apps','Dependencies','TestApps','TestResults','BcptTestResults','BuildOutput' | ForEach-Object {
            $name = "$($_)ArtifactsName"
            $value = "$($project.Replace('\','_'))-$("$ENV:GITHUB_REF_NAME".Replace('/','_'))-$_-$($settings.repoVersion).$($settings.appBuild).$($settings.appRevision)"
            Write-Host "::set-output name=$name::$value"
            Add-Content -Path $env:GITHUB_ENV -Value "$name=$value"
          }

      - name: Publish artifacts - apps
        uses: actions/upload-artifact@v2
        if: github.event_name != 'pull_request' && (github.ref_name == 'main' || startswith(github.ref_name, 'release/'))
        with:
          name: ${{ env.appsArtifactsName }}
          path: '${{ matrix.project }}/.buildartifacts/Apps/'
          if-no-files-found: ignore

      - name: Publish artifacts - dependencies
        uses: actions/upload-artifact@v2
        if: github.event_name != 'pull_request' && (github.ref_name == 'main' || startswith(github.ref_name, 'release/'))
        with:
          name: ${{ env.dependenciesArtifactsName }}
          path: '${{ matrix.project }}/.buildartifacts/Dependencies/'
          if-no-files-found: ignore

      - name: Publish artifacts - test apps
        uses: actions/upload-artifact@v2
        if: github.event_name != 'pull_request' && (github.ref_name == 'main' || startswith(github.ref_name, 'release/'))
        with:
          name: ${{ env.testAppsArtifactsName }}
          path: '${{ matrix.project }}/.buildartifacts/TestApps/'
          if-no-files-found: ignore

      - name: Publish artifacts - build output
        uses: actions/upload-artifact@v2
        if: (success() || failure()) && (hashFiles(format('{0}/BuildOutput.txt',matrix.project)) != '')
        with:
          name: ${{ env.buildOutputArtifactsName }}
          path: '${{ matrix.project }}/BuildOutput.txt'
          if-no-files-found: ignore

      - name: Publish artifacts - test results
        uses: actions/upload-artifact@v2
        if: (success() || failure()) && (hashFiles(format('{0}/TestResults.xml',matrix.project)) != '')
        with:
          name: ${{ env.testResultsArtifactsName }}
          path: '${{ matrix.project }}/TestResults.xml'
          if-no-files-found: ignore

      - name: Publish artifacts - bcpt test results
        uses: actions/upload-artifact@v2
        if: (success() || failure()) && (hashFiles(format('{0}/bcptTestResults.json',matrix.project)) != '')
        with:
          name: ${{ env.bcptTestResultsArtifactsName }}
          path: '${{ matrix.project }}/bcptTestResults.json'
          if-no-files-found: ignore

      - name: Cleanup
        if: always()
        uses: freddydk/AL-Go-Actions/PipelineCleanup@main
        with:
          parentTelemetryScopeJson: ${{ needs.Initialization.outputs.telemetryScopeJson }}
          Project: ${{ matrix.project }}

  Deploy:
    needs: [ Initialization, Build ]
    if: ${{ github.event_name != 'pull_request' && github.ref_name == 'main' && needs.Initialization.outputs.environmentCount > 0 }}
    strategy: ${{ fromJson(needs.Initialization.outputs.environments) }}
    runs-on: ${{ fromJson(matrix.os) }}
    name: Deploy to ${{ matrix.environment }}
    environment:
      name: ${{ matrix.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          path: '${{ github.workspace }}\artifacts'

      - name: EnvName
        id: envName
        run: |
          $envName = '${{ matrix.environment }}'.split(' ')[0]
          Write-Host "::set-output name=envName::$envName"

      - name: Read settings
        uses: freddydk/AL-Go-Actions/ReadSettings@main

      - name: Read secrets
        uses: freddydk/AL-Go-Actions/ReadSecrets@main
        env:
          secrets: ${{ toJson(secrets) }}
        with:
          settingsJson: ${{ env.Settings }}
          secrets: '${{ steps.envName.outputs.envName }}-AuthContext,${{ steps.envName.outputs.envName }}_AuthContext,AuthContext,${{ steps.envName.outputs.envName }}-EnvironmentName,${{ steps.envName.outputs.envName }}_EnvironmentName,EnvironmentName,Projects'

      - name: AuthContext
        id: authContext
        run: |
          $envName = '${{ steps.envName.outputs.envName }}'
          $authContext = $null
          "$($envName)-AuthContext", "$($envName)_AuthContext", "AuthContext" | ForEach-Object {
            if (!($authContext)) {
              $authContext = [System.Environment]::GetEnvironmentVariable($_)
              if ($authContext) {
                Write-Host "Using $_ secret"
              }
            }            
          }
          if (!($authContext)) {
            Write-Host "::Error::No AuthContext provided"
            exit 1
          }
          $environmentName = $null
          "$($envName)-EnvironmentName", "$($envName)_EnvironmentName", "EnvironmentName" | ForEach-Object {
            if (!($EnvironmentName)) {
              $EnvironmentName = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String([System.Environment]::GetEnvironmentVariable($_)))
              if ($EnvironmentName) {
                Write-Host "Using $_ secret"
              }
            }            
          }
          if (!($environmentName)) {
            $environmentName = '${{ steps.envName.outputs.envName }}'
          }
          $environmentName = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes(($environmentName + '${{ matrix.environment }}'.SubString($envName.Length)).ToUpperInvariant()))

          $projects = [System.Environment]::GetEnvironmentVariable("$($envName)-Projects")
          if (-not $projects) {
            $projects = [System.Environment]::GetEnvironmentVariable("$($envName)_Projects")
            if (-not $projects) {
              $projects = [System.Environment]::GetEnvironmentVariable('projects')
            }
          }

          Write-Host "::set-output name=authContext::$authContext"
          Write-Host "set-output name=authContext::$authContext"
          Write-Host "::set-output name=environmentName::$environmentName"
          Write-Host "set-output name=environmentName::$environmentName"
          Write-Host "::set-output name=projects::$projects"
          Write-Host "set-output name=projects::$projects"

      - name: Deploy
        uses: freddydk/AL-Go-Actions/Deploy@main
        env:
          authContext: '${{ steps.authContext.outputs.authContext }}'
        with:
          type: 'CD'
          projects: '${{ steps.authContext.outputs.projects }}'
          environmentName: '${{ steps.authContext.outputs.environmentName }}'
          artifacts: '${{ github.workspace }}\artifacts'

  Deliver:
    needs: [ Initialization, Build ]
    if: ${{ github.event_name != 'pull_request' && github.ref_name == 'main' && needs.Initialization.outputs.deliveryTargetCount > 0 }}
    strategy:
      matrix:
        deliveryTarget: ${{ fromJson(needs.Initialization.outputs.deliveryTargets) }}
      fail-fast: false
    runs-on: [ bc-build ]
    name: Deliver to ${{ matrix.deliveryTarget }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          path: '${{ github.workspace }}\artifacts'

      - name: Read settings
        uses: freddydk/AL-Go-Actions/ReadSettings@main

      - name: Read secrets
        uses: freddydk/AL-Go-Actions/ReadSecrets@main
        env:
          secrets: ${{ toJson(secrets) }}
        with:
          settingsJson: ${{ env.Settings }}
          secrets: '${{ matrix.deliveryTarget }}Context'

      - name: DeliveryContext
        id: deliveryContext
        run: |
          $contextName = '${{ matrix.deliveryTarget }}Context'
          $deliveryContext = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String([System.Environment]::GetEnvironmentVariable($contextName)))
          Write-Host "::set-output name=deliveryContext::$deliveryContext"
          Write-Host "set-output name=deliveryContext::$deliveryContext"

      - name: Deliver
        uses: freddydk/AL-Go-Actions/Deliver@main
        env:
          deliveryContext: '${{ steps.deliveryContext.outputs.deliveryContext }}'
        with:
          type: 'CD'
          projects: '*'
          deliveryTarget: '${{ matrix.deliveryTarget }}'
          artifacts: '${{ github.workspace }}\artifacts'

  PostProcess:
    if: always()
    runs-on: [ bc-build ]
    needs: [ Initialization, Build, Deploy, Deliver ]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Finalize the workflow
        id: PostProcess
        uses: freddydk/AL-Go-Actions/WorkflowPostProcess@main
        with:
          eventId: "DO0091"
          telemetryScopeJson: ${{ needs.Initialization.outputs.telemetryScopeJson }}
